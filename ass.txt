Assignment 1 (BFS & DFS for 8-puzzle)


from collections import deque

class Puzzle:
    def __init__(self, start, goal):
        self.start = start
        self.goal = goal
        self.rows = 3
        self.cols = 3

    def find_zero(self, state):
        """Find the position of the blank (zero) in the puzzle."""
        for i in range(self.rows):
            for j in range(self.cols):
                if state[i][j] == 0:
                    return i, j

    def is_goal(self, state):
        """Check if the current state is the goal state."""
        return state == self.goal

    def generate_successors(self, state):
        """Generate all possible successors from the current state."""
        successors = []
        x, y = self.find_zero(state)
        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]  # right, left, down, up

        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < self.rows and 0 <= ny < self.cols:
                # Create a new state by swapping the blank with the adjacent tile
                new_state = [row[:] for row in state]
                new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
                successors.append(new_state)
        return successors

    def print_state(self, state):
        """Print the state in a readable 3x3 format."""
        for row in state:
            print(row)
        print()

    def dfs(self):
        """Depth-First Search for solving the 8-puzzle."""
        stack = [(self.start, [])]  # (current state, path to this state)
        visited = set()

        while stack:
            current, path = stack.pop()
            current_tuple = tuple(tuple(row) for row in current)

            if current_tuple in visited:
                continue
            visited.add(current_tuple)

            if self.is_goal(current):
                return path + [current]  # Return the path to the goal state

            for successor in self.generate_successors(current):
                stack.append((successor, path + [current]))
        return None

    def bfs(self):
        """Breadth-First Search for solving the 8-puzzle."""
        queue = deque([(self.start, [])])  # (current state, path to this state)
        visited = set()

        while queue:
            current, path = queue.popleft()
            current_tuple = tuple(tuple(row) for row in current)

            if current_tuple in visited:
                continue
            visited.add(current_tuple)

            if self.is_goal(current):
                return path + [current]  # Return the path to the goal state

            for successor in self.generate_successors(current):
                queue.append((successor, path + [current]))
        return None


# Example Usage
start_state = [
    [1, 2, 3],
    [0, 4, 6],
    [7, 5, 8]
]

goal_state = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 0]
]

puzzle = Puzzle(start_state, goal_state)

print("Solving using DFS...")
dfs_solution = puzzle.dfs()
if dfs_solution:
    for state in dfs_solution:
        puzzle.print_state(state)
else:
    print("No solution found using DFS.")

print("Solving using BFS...")
bfs_solution = puzzle.bfs()
if bfs_solution:
    for state in bfs_solution:
        puzzle.print_state(state)
else:
    print("No solution found using BFS.")






_________________________________________________________________________________________________________________________________________________________________


Assignment 2 (Constraint Satisfaction Problem) (3 Missionaries and 3 Cannibals Problem)

from collections import deque
# Check if a state is valid
def is_valid_state(state):
    m_left, c_left, boat, m_right, c_right = state

    # Missionaries and cannibals should not be negative
    if m_left < 0 or c_left < 0 or m_right < 0 or c_right < 0:
        return False

    # Missionaries must not be outnumbered by cannibals on either side
    if (m_left > 0 and m_left < c_left) or (m_right > 0 and m_right < c_right):
        return False

    return True

# Generate all possible next states
def get_successors(state):
    m_left, c_left, boat, m_right, c_right = state
    moves = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]  # Possible boat moves
    successors = []

    for m, c in moves:
        if boat == 'left':  # Boat moves from left to right
            new_state = (m_left - m, c_left - c, 'right', m_right + m, c_right + c)
        else:  # Boat moves from right to left
            new_state = (m_left + m, c_left + c, 'left', m_right - m, c_right - c)

        if is_valid_state(new_state):
            successors.append(new_state)

    return successors

# BFS to find the solution
def solve():
    initial_state = (3, 3, 'left', 0, 0)  # (m_left, c_left, boat, m_right, c_right)
    goal_state = (0, 0, 'right', 3, 3)
    queue = deque([(initial_state, [])])  # (current state, path to state)
    visited = set()

    while queue:
        current_state, path = queue.popleft()

        if current_state in visited:
            continue
        visited.add(current_state)

        # Check if the goal state is reached
        if current_state == goal_state:
            return path + [current_state]

        # Generate successors and add to the queue
        for successor in get_successors(current_state):
            queue.append((successor, path + [current_state]))

    return None  # No solution found

# Main function
if __name__ == "__main__":
    solution = solve()

    if solution:
        print("Solution found:")
        for step in solution:
            print(step)
    else:
        print("No solution exists.")


________________________________________________________________________________________________________________________________________________________________




Assignment 3 (Family Tree)


from pyswip import Prolog

# Initialize Prolog
prolog = Prolog()

# Define gender facts (male and female)
prolog.assertz("male(rajesh)")
prolog.assertz("male(amit)")
prolog.assertz("male(vivek)")
prolog.assertz("female(sita)")
prolog.assertz("female(geeta)")
prolog.assertz("female(kiran)")
prolog.assertz("female(rani)")

# Define family relationships (parent facts)
prolog.assertz("parent(rajesh, geeta)")  # Rajesh is Geeta's parent
prolog.assertz("parent(rajesh, amit)")   # Rajesh is Amit's parent
prolog.assertz("parent(sita, geeta)")    # Sita is Geeta's parent
prolog.assertz("parent(sita, amit)")     # Sita is Amit's parent
prolog.assertz("parent(geeta, kiran)")   # Geeta is Kiran's parent
prolog.assertz("parent(geeta, vivek)")   # Geeta is Vivek's parent
prolog.assertz("parent(amit, rani)")     # Amit is Rani's parent

# Define rules for family relationships

# Sibling rule: X and Y are siblings if they share the same parent
prolog.assertz("sibling(X, Y) :- parent(P, X), parent(P, Y), X \\= Y")

# Grandparent rule: X is a grandparent of Y if X is a parent of Z and Z is a parent of Y
prolog.assertz("grandparent(X, Y) :- parent(X, Z), parent(Z, Y)")

# Mother rule: X is the mother of Y if X is a parent of Y and X is female
prolog.assertz("mother(X, Y) :- parent(X, Y), female(X)")

# Father rule: X is the father of Y if X is a parent of Y and X is male
prolog.assertz("father(X, Y) :- parent(X, Y), male(X)")

# Grandmother rule: X is the grandmother of Y if X is a female and a parent of Z, and Z is a parent of Y
prolog.assertz("grandmother(X, Y) :- mother(X, Z), parent(Z, Y)")

# Grandfather rule: X is the grandfather of Y if X is a male and a parent of Z, and Z is a parent of Y
prolog.assertz("grandfather(X, Y) :- father(X, Z), parent(Z, Y)")

# Queries and Outputs

# Query 1: Find Geeta's siblings
print("Geeta's siblings:")
siblings = list(prolog.query("setof(Sibling, sibling(geeta, Sibling), SiblingList)"))
if siblings:
    for sibling in siblings[0]['SiblingList']:
        print(sibling)
else:
    print("No siblings found.")

# Query 2: Find Rani's grandparents
print("\nRani's grandparents:")
grandparents = list(prolog.query("setof(Grandparent, grandparent(Grandparent, rani), GrandparentList)"))
if grandparents:
    for grandparent in grandparents[0]['GrandparentList']:
        print(grandparent)
else:
    print("No grandparents found.")

# Query 3: Find Kiran's mother
print("\nKiran's mother:")
mother = list(prolog.query("mother(Mother, kiran)"))
if mother:
    for m in mother:
        print(m['Mother'])
else:
    print("No mother found.")

# Query 4: Find Vivek's father
print("\nVivek's father:")
father = list(prolog.query("father(Father, vivek)"))
if father:
    for f in father:
        print(f['Father'])
else:
    print("No father found.")




________________________________________________________________________________________________________________________________________________________________


Assignment 4 (A*)


from queue import PriorityQueue

# Define the graph with cities and distances
graph = {
    "Pune": {"Mumbai": 120, "Nashik": 200},
    "Mumbai": {"Pune": 120, "Nagpur": 850},
    "Nashik": {"Pune": 200, "Nagpur": 700},
    "Nagpur": {"Mumbai": 850, "Nashik": 700, "Bhopal": 350},
    "Bhopal": {"Nagpur": 350, "Indore": 200},
    "Indore": {"Bhopal": 200}
}

# Heuristic values (straight-line distance to goal, e.g., Indore)
heuristic = {
    "Pune": 800,
    "Mumbai": 900,
    "Nashik": 700,
    "Nagpur": 400,
    "Bhopal": 200,
    "Indore": 0  # Goal node
}

def a_star_algorithm(start, goal):
    # Priority queue to hold nodes to explore
    open_list = PriorityQueue()
    open_list.put((0, start))  # (cost, node)
    
    # Dictionary to store the cost to reach each node
    g_costs = {node: float('inf') for node in graph}
    g_costs[start] = 0
    
    # Dictionary to reconstruct the shortest path
    came_from = {}
    
    while not open_list.empty():
        # Get the node with the lowest cost
        _, current = open_list.get()
        
        if current == goal:
            # Reconstruct the path
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            path.reverse()
            return path, g_costs[goal]
        
        # Explore neighbors
        for neighbor, cost in graph[current].items():
            tentative_g_cost = g_costs[current] + cost
            if tentative_g_cost < g_costs[neighbor]:
                g_costs[neighbor] = tentative_g_cost
                f_cost = tentative_g_cost + heuristic[neighbor]
                open_list.put((f_cost, neighbor))
                came_from[neighbor] = current
    
    return None, float('inf')  # If no path is found

# Example Usage
start_city = "Pune"
goal_city = "Indore"
path, cost = a_star_algorithm(start_city, goal_city)

print(f"Shortest path from {start_city} to {goal_city}: {path}")
print(f"Total cost: {cost}")


_______________________________________________________________________________________________________________________________________________________________



Assignment 5 (Minimax)


import math

# Define constants for the players and empty cells
PLAYER_X = 'X'
PLAYER_O = 'O'
EMPTY = ' '

def print_board(board):
    """Utility function to print the Tic-Tac-Toe board."""
    for row in board:
        print(' | '.join(row))
    print("\n")

def is_terminal(board):
    """Check if the game has ended."""
    # Check rows, columns, and diagonals for a win
    for row in board:
        if row[0] == row[1] == row[2] and row[0] != EMPTY:
            return True
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != EMPTY:
            return True
    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != EMPTY:
        return True
    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != EMPTY:
        return True
    # Check for a tie
    for row in board:
        if EMPTY in row:
            return False
    return True

def evaluate(board):
    """Evaluate the board score."""
    # Check rows, columns, and diagonals for a win
    for row in board:
        if row[0] == row[1] == row[2]:
            if row[0] == PLAYER_X:
                return 1
            elif row[0] == PLAYER_O:
                return -1
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col]:
            if board[0][col] == PLAYER_X:
                return 1
            elif board[0][col] == PLAYER_O:
                return -1
    if board[0][0] == board[1][1] == board[2][2]:
        if board[0][0] == PLAYER_X:
            return 1
        elif board[0][0] == PLAYER_O:
            return -1
    if board[0][2] == board[1][1] == board[2][0]:
        if board[0][2] == PLAYER_X:
            return 1
        elif board[0][2] == PLAYER_O:
            return -1
    # If no winner, return 0
    return 0

def get_moves(board):
    """Get a list of all valid moves."""
    moves = []
    for row in range(3):
        for col in range(3):
            if board[row][col] == EMPTY:
                moves.append((row, col))
    return moves

def apply_move(board, move, player):
    """Apply a move to the board."""
    board[move[0]][move[1]] = player

def undo_move(board, move):
    """Undo a move on the board."""
    board[move[0]][move[1]] = EMPTY

def minimax(board, depth, maximizing_player):
    """Minimax algorithm."""
    if depth == 0 or is_terminal(board):
        return evaluate(board), None

    best_move = None
    if maximizing_player:
        max_eval = -math.inf
        for move in get_moves(board):
            apply_move(board, move, PLAYER_X)
            eval_score, _ = minimax(board, depth - 1, False)
            undo_move(board, move)
            if eval_score > max_eval:
                max_eval = eval_score
                best_move = move
        return max_eval, best_move
    else:
        min_eval = math.inf
        for move in get_moves(board):
            apply_move(board, move, PLAYER_O)
            eval_score, _ = minimax(board, depth - 1, True)
            undo_move(board, move)
            if eval_score < min_eval:
                min_eval = eval_score
                best_move = move
        return min_eval, best_move

# Example game board
board = [
    [PLAYER_X, PLAYER_O, PLAYER_X],
    [PLAYER_O, PLAYER_X, EMPTY],
    [EMPTY, EMPTY, PLAYER_O]
]

print("Current Board:")
print_board(board)

# Find the best move for PLAYER_X
score, best_move = minimax(board, depth=5, maximizing_player=True)
print(f"Best Move for {PLAYER_X}: {best_move} with score {score}")


________________________________________________________________________________________________________________________________________________________________


Assignment 6 ( 8 Queens)

def is_safe(board, row, col):
    """
    Check if placing a queen at (row, col) is safe.
    """
    # Check this row on the left
    for i in range(col):
        if board[row][i] == 1:
            return False

    # Check upper diagonal on the left
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check lower diagonal on the left
    for i, j in zip(range(row, len(board)), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    return True

def solve_n_queens(board, col):
    """
    Use backtracking to solve the N-Queens problem.
    """
    if col >= len(board):
        return True

    for i in range(len(board)):
        if is_safe(board, i, col):
            # Place the queen
            board[i][col] = 1

            # Recur to place the rest of the queens
            if solve_n_queens(board, col + 1):
                return True

            # Backtrack: Remove the queen
            board[i][col] = 0

    return False

def print_board(board):
    """
    Print the chessboard.
    """
    for row in board:
        print(" ".join('Q' if cell == 1 else '.' for cell in row))
    print("\n")

# Initialize an 8x8 board
N = 8
board = [[0 for _ in range(N)] for _ in range(N)]

if solve_n_queens(board, 0):
    print("Solution to the 8-Queens problem:")
    print_board(board)
else:
    print("No solution exists.")


________________________________________________________________________________________________________________________________________________________________


Assignment 7 (Forward Chaining) 

def forward_chaining(facts, rules, goal):
    """
    Implements the forward chaining algorithm.

    Args:
        facts: A set of known facts (symptoms, observations, etc.).
        rules: A list of rules. Each rule is a tuple (conditions, conclusion),
               where conditions is a list of facts and conclusion is a single fact.
        goal: The fact we want to derive (e.g., a diagnosis).

    Returns:
        True if the goal can be derived, otherwise False.
    """
    inferred = set()  # Facts already inferred
    while True:
        added_fact = False  # Track if a new fact is added in this iteration

        for conditions, conclusion in rules:
            # Check if rule is applicable and conclusion is not already inferred
            if all(condition in facts for condition in conditions) and conclusion not in facts:
                facts.add(conclusion)
                inferred.add(conclusion)
                added_fact = True
                print(f"Inferred: {conclusion}")

                if conclusion == goal:
                    return True

        if not added_fact:  # If no new facts are added, stop the process
            break

    return goal in facts


# Example Usage
facts = {"fever", "cough", "shortness of breath"}  # Known facts (symptoms)
rules = [
    (["fever", "cough"], "flu"),  # If fever and cough, then flu
    (["flu", "body ache"], "severe flu"),  # If flu and body ache, then severe flu
    (["flu", "shortness of breath"], "pneumonia"),  # If flu and shortness of breath, then pneumonia
    (["headache", "sensitivity to light"], "migraine"),  # If headache and sensitivity to light, then migraine
]
goal = "pneumonia"

print("Starting Forward Chaining...")
if forward_chaining(facts, rules, goal):
    print(f"Goal '{goal}' has been derived!")
else:
    print(f"Goal '{goal}' cannot be derived.")

________________________________________________________________________________________________________________________________________________________________



Assignment 8(Backward Chaining) 

def backward_chaining(facts, rules, goal):
    """
    Implements the backward chaining algorithm.

    Args:
        facts: A set of known facts (symptoms, observations, etc.).
        rules: A list of rules. Each rule is a tuple (conditions, conclusion),
               where conditions is a list of facts and conclusion is a single fact.
        goal: The fact we want to derive (e.g., a diagnosis).

    Returns:
        True if the goal can be derived, otherwise False.
    """
    if goal in facts:
        return True  # The goal is already a known fact

    for conditions, conclusion in rules:
        if conclusion == goal:
            # Check if all conditions for this rule can be satisfied
            if all(backward_chaining(facts, rules, condition) for condition in conditions):
                return True

    return False


# Example Usage
facts = {"fever", "cough", "shortness of breath"}  # Known facts (symptoms)
rules = [
    (["fever", "cough"], "flu"),  # If fever and cough, then flu
    (["flu", "body ache"], "severe flu"),  # If flu and body ache, then severe flu
    (["flu", "shortness of breath"], "pneumonia"),  # If flu and shortness of breath, then pneumonia
    (["headache", "sensitivity to light"], "migraine"),  # If headache and sensitivity to light, then migraine
]
goal = "pneumonia"

print("Starting Backward Chaining...")
if backward_chaining(facts, rules, goal):
    print(f"Goal '{goal}' has been derived!")
else:
    print(f"Goal '{goal}' cannot be derived.")



________________________________________________________________________________________________________________________________________________________________



Assignment 9 (Chat bot)

import random

# Define symptoms and corresponding conditions
conditions = {
    "fever": ["flu", "common cold", "COVID-19"],
    "cough": ["flu", "common cold", "bronchitis"],
    "headache": ["migraine", "stress", "dehydration"],
    "shortness of breath": ["asthma", "COVID-19", "pneumonia"],
    "body ache": ["flu", "viral infection"],
    "sore throat": ["common cold", "strep throat", "flu"],
}

# Define responses for small talk
small_talk = {
    "hello": ["Hello! How can I assist you today?", "Hi there! What symptoms are you experiencing?"],
    "how are you": ["I'm just a bot, but I'm here to help you!"],
    "thank you": ["You're welcome! Stay healthy!", "Happy to help!"],
    "bye": ["Goodbye! Take care!", "Bye! Feel better soon!"],
}

def chatbot_response(user_input):
    user_input = user_input.lower().strip()

    # Small talk response
    for key in small_talk:
        if key in user_input:
            return random.choice(small_talk[key])

    # Check for symptoms
    symptoms_found = [symptom for symptom in conditions if symptom in user_input]
    if symptoms_found:
        response = "Based on your symptoms, you might have the following conditions:\n"
        for symptom in symptoms_found:
            response += f"- {symptom.capitalize()}: {', '.join(conditions[symptom])}\n"
        response += "I recommend consulting a doctor for a proper diagnosis."
        return response

    # Default response
    return "I'm sorry, I couldn't understand that. Can you describe your symptoms or ask a question?"

# Main chatbot loop
def healthcare_chatbot():
    print("Healthcare Assistant Chatbot")
    print("Type 'bye' to end the conversation.\n")

    while True:
        user_input = input("You: ")
        if user_input.lower() in ["bye", "exit", "quit"]:
            print("Chatbot: Goodbye! Stay healthy!")
            break

        response = chatbot_response(user_input)
        print(f"Chatbot: {response}")

# Run the chatbot
if __name__ == "__main__":
    healthcare_chatbot()



